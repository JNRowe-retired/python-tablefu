{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","tagline":"A Python version (almost a port) of ProPublica's TableFu","name":"Python TableFu","body":"Python TableFu is a tool for manipulating spreadsheet-like tables in Python. It began as a Python implementation of ProPublica's [TableFu](http://propublica.github.com/table-fu/), though new methods have been added. TableFu allows filtering, faceting and manipulating of data. Going forward, the project aims to create something akin to an ORM for spreadsheets.\r\n\r\nUsage:\r\n------\r\n\r\n    >>> from table_fu import TableFu\r\n    >>> table = TableFu.from_file('tests/test.csv')\r\n    >>> table.columns\r\n    ['Author', 'Best Book', 'Number of Pages', 'Style']\r\n\r\n    # get all authors\r\n    >>> table.values('Author')\r\n    ['Samuel Beckett', 'James Joyce', 'Nicholson Baker', 'Vladimir Sorokin']\r\n\r\n    # total a column\r\n    >>> table.total('Number of Pages')\r\n    1177.0\r\n    \r\n    # filtering a table returns a new instance\r\n    >>> t2 = table.filter(Style='Modernism')\r\n    >>> list(t2)\r\n    [<Row: Samuel Beckett, Malone Muert, 120, Modernism>,\r\n     <Row: James Joyce, Ulysses, 644, Modernism>]\r\n    \r\n    \r\n    # each TableFu instance acts like a list of rows\r\n    >>> table[0]\r\n    <Row: Samuel Beckett, Malone Muert, 120, Modernism>\r\n    \r\n    list(table.rows)\r\n    [<Row: Samuel Beckett, Malone Muert, 120, Modernism>,\r\n     <Row: James Joyce, Ulysses, 644, Modernism>,\r\n     <Row: Nicholson Baker, Mezannine, 150, Minimalism>,\r\n     <Row: Vladimir Sorokin, The Queue, 263, Satire>]\r\n    \r\n    # rows, in turn, act like dictionaries\r\n    >>> row = table[1]\r\n    >>> print row['Author']\r\n    James Joyce\r\n    \r\n    # transpose a table\r\n    >>> t2 = table.transpose()\r\n    >>> list(t2)\r\n    [<Row: Best Book, Malone Muert, Ulysses, Mezannine, The Queue>,\r\n     <Row: Number of Pages, 120, 644, 150, 263>,\r\n     <Row: Style, Modernism, Modernism, Minimalism, Satire>]\r\n    \r\n    >>> t2.columns\r\n    ['Author',\r\n     'Samuel Beckett',\r\n     'James Joyce',\r\n     'Nicholson Baker',\r\n     'Vladimir Sorokin']\r\n    \r\n    # sort rows\r\n    >>> table.sort('Author')\r\n    >>> table.rows\r\n    [<Row: James Joyce, Ulysses, 644, Modernism>,\r\n     <Row: Nicholson Baker, Mezannine, 150, Minimalism>,\r\n     <Row: Samuel Beckett, Malone Muert, 120, Modernism>,\r\n     <Row: Vladimir Sorokin, The Queue, 263, Satire>]\r\n    \r\n    # sorting is stored\r\n    table.options['sorted_by']\r\n    {'Author': {'reverse': False}}\r\n    \r\n    # which is handy because...\r\n    \r\n    # tables can also be faceted (and options are copied to new tables)\r\n    >>> for t in table.facet_by('Style'):\r\n    ...     print t.faceted_on\r\n    ...     t.table\r\n    Minimalism\r\n    [['Nicholson Baker', 'Mezannine', '150', 'Minimalism']]\r\n    Modernism\r\n    [['Samuel Beckett', 'Malone Muert', '120', 'Modernism'],\r\n     ['James Joyce', 'Ulysses', '644', 'Modernism']]\r\n    Satire\r\n    [['Vladimir Sorokin', 'The Queue', '263', 'Satire']]\r\n\r\nHere's an [advanced example](https://gist.github.com/765321) that uses faceting and filtering to produce aggregates from [this spreadsheet](https://spreadsheets.google.com/ccc?key=0AprNP7zjIYS1dG5wbVJpWTVacWpUaUh5VHUxMk1wTEE&hl=en&authkey=CJfB5MYP) (extracted from the New York Times Congress API).\r\n\r\nFormatting\r\n----------\r\n\r\nFilters are just functions that take a value and some number of positional arguments.\r\nNew filters can be registered with the included Formatter class.\r\n\r\n    >>> from table_fu.formatting import Formatter\r\n    >>> format = Formatter()\r\n    >>> def capitalize(value, *args):\r\n    ...     return str(value).capitalize()\r\n    >>> format.register(capitalize)\r\n    >>> print format('foo', 'capitalize')\r\n    Foo\r\n    \r\nCells can be formatted according to rules of the table (which carry over if the table is faceted):\r\n\r\n    >>> table = TableFu(open('tests/sites.csv'))\r\n    >>> table.columns\r\n    ['Name', 'URL', 'About']\r\n    >>> table.formatting = {\r\n    ... 'Name': {'filter': 'link', 'args': ['URL']}\r\n    ... }\r\n    >>> print table[0]['Name']\r\n    <a href=\"http://www.chrisamico.com\" title=\"ChrisAmico.com\">ChrisAmico.com</a>\r\n    \r\n    \r\nHTML Output\r\n-----------\r\n\r\nTableFu can output an HTML table, using formatting you specify:\r\n\r\n    >>> table = TableFu(open('tests/sites.csv'))\r\n    >>> table.columns\r\n    ['Name', 'URL', 'About']\r\n    >>> table.formatting = {'Name': {'filter: 'link', 'args': ['URL']}}\r\n    >>> table.columns = 'Name', 'About'\r\n    >>> print table.html()\r\n    <table>\r\n    <thead>\r\n    <tr><th>Name</th><th>About</th></tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr id=\"row0\" class=\"row even\"><td class=\"datum\"><a href=\"http://www.chrisamico.com\" title=\"ChrisAmico.com\">ChrisAmico.com</a></td><td class=\"datum\">My personal site and blog</td></tr>\r\n    <tr id=\"row1\" class=\"row odd\"><td class=\"datum\"><a href=\"http://www.propublica.org\" title=\"ProPublica\">ProPublica</a></td><td class=\"datum\">Builders of the Ruby version of this library</td></tr>\r\n    <tr id=\"row2\" class=\"row even\"><td class=\"datum\"><a href=\"http://www.pbs.org/newshour\" title=\"PBS NewsHour\">PBS NewsHour</a></td><td class=\"datum\">Where I spend my days</td></tr>\r\n    </tbody>\r\n    </table>\r\n\r\n"}